# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

before:
  hooks:
    - go generate ./...
    - go mod tidy

builds:
  - main: ./cmd/holos
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64

# .goreleaser.yml
nightly:
  # Default: `{{ incpatch .Version }}-{{ .ShortCommit }}-nightly`.
  # Templates: allowed.
  version_template: "{{ .Version }}-{{ .ShortCommit }}-devel"

  # Tag name to create if publish_release is enabled.
  tag_name: devel

  # Whether to publish a release or not.
  # Only works on GitHub.
  publish_release: true

  # Whether to delete previous pre-releases for the same `tag_name` when
  # releasing.
  # This allows you to keep a single pre-release.
  keep_single_release: true

signs:
  - artifacts: checksum
    args: ["-u", "code-signing-key@openinfrastructure.co", "--output", "${signature}", "--detach-sign", "${artifact}"]

archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        format: zip

changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"

source:
  enabled: true
  name_template: '{{ .ProjectName }}_{{ .Version }}_source_code'

sboms:
  - id: source
    artifacts: source
    documents:
      - "{{ .ProjectName }}_{{ .Version }}_sbom.spdx.json"

brews:
  - name: holos
    repository:
      owner: holos-run
      name: homebrew-tap
      branch: main
      token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"
    directory: Formula
    homepage: "https://holos.run"
    description: "Holos CLI"
    dependencies:
      - name: helm
        type: optional
      - name: kubectl
        type: optional
    install: |
      bin.install "holos"
      bash_output = Utils.safe_popen_read(bin/"holos", "completion", "bash")
      (bash_completion/"holos").write bash_output
      zsh_output = Utils.safe_popen_read(bin/"holos", "completion", "zsh")
      (zsh_completion/"holos").write zsh_output
      fish_output = Utils.safe_popen_read(bin/"holos", "completion", "fish")
      (fish_completion/"holos.fish").write fish_output
    test: |
      system "#{bin}/holos version"
